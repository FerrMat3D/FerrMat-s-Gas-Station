/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";

import * as THREE from 'three';
import { ShaderMaterial } from 'three';


export function MerryChristmas(props) {
  const { nodes, materials } = useGLTF("./MerryChristmas.glb");


  const material = new ShaderMaterial({
    side: THREE.DoubleSide,  // Adicione esta linha para renderizar de ambos os lados
    uniforms: {
      colorStart: { value: new THREE.Vector3(8, 8, 3) },
      colorEnd: { value: new THREE.Vector3(8, 8,8) },
      time: { value: 0.0 },
    },
    vertexShader: `
      void main() {
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
      }
    `,
    fragmentShader: `
      uniform float time;
      uniform vec3 colorStart;
      uniform vec3 colorEnd;
  
      void main() {
        // Use a função sin para criar uma transição suave com fade in e fade out
        float transition = clamp(sin(time * 3.14159265359), 0.0, 1.0);
  
        // Interpole entre as cores de início e fim com base na transição
        vec3 color = mix(colorStart, colorEnd, transition);
  
        gl_FragColor = vec4(color, 1.0);
      }
    `,
  });
  
  
  const currentTimeRef = useRef(0);
  
 useEffect(() => {
    let animationFrameId;
  
    const updateMaterialTime = () => {
      const time = (performance.now() % 1000) / 2000;
      currentTimeRef.current = time;
      material.uniforms.time.value = time;
      animationFrameId = requestAnimationFrame(updateMaterialTime);
    };
  
    updateMaterialTime();
  
    return () => {
      cancelAnimationFrame(animationFrameId);
    };
  },  [material]); // Executa apenas uma vez ao montar o componente

  
  const noelmaterial = new ShaderMaterial({
    side: THREE.DoubleSide,  // Adicione esta linha para renderizar de ambos os lados
    uniforms: {
      colorStart: { value: new THREE.Vector3(8, 2, 2) },
      colorEnd: { value: new THREE.Vector3(3, 3, 3) },
      time: { value: 0.0 },
    },
    vertexShader: `
      void main() {
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
      }
    `,
    fragmentShader: `
      uniform float time;
      uniform vec3 colorStart;
      uniform vec3 colorEnd;
  
      void main() {
        // Use a função sin para criar uma transição suave com fade in e fade out
        float transition = clamp(sin(time * 3.14159265359), 0.0, 1.0);
  
        // Interpole entre as cores de início e fim com base na transição
        vec3 color = mix(colorStart, colorEnd, transition);
  
        gl_FragColor = vec4(color, 1.0);
      }
    `,
  });
  
  
  const noelcurrentTimeRef = useRef(0);
  
  useEffect(() => {
    let animationFrameId;
  
    const updateMaterialTime = () => {
      const time = (performance.now() % 5000) / 1000;
      noelcurrentTimeRef.current = time;
      noelmaterial.uniforms.time.value = time;
      animationFrameId = requestAnimationFrame(updateMaterialTime);
    };
  
    updateMaterialTime();
  
    return () => {
      cancelAnimationFrame(animationFrameId);
    };
  },  [noelmaterial]); // Executa apenas uma vez ao montar o componente


  return (
    <group {...props} dispose={null}>
    <mesh
      castShadow
      receiveShadow
      geometry={nodes.Text.geometry}
      material={noelmaterial}
      position={[10.27138901, 22.56683922, -0.40250069]}
      rotation={[Math.PI / 2, 1.2e-7, -Math.PI / 2]}
      scale={[0.71795827, 0.19007552, 0.71795827]}
    />
    <group
      position={[-10.36349869, 15.96487236, -0.2102499]}
      rotation={[0.87266473, 4e-8, Math.PI / 2]}
      scale={1.57425499}
    >
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Text012.geometry}
        material={material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Text012_1.geometry}
        material={noelmaterial}
      />
    </group>
    <mesh
      castShadow
      receiveShadow
      geometry={nodes.Circle001.geometry}
      material={materials["Material.006"]}
      position={[10.2531147, 11.73974037, 0.01737839]}
      rotation={[0, 0, -Math.PI / 2]}
      scale={0.51922238}
    />
  </group>
  );
}

useGLTF.preload("./MerryChristmas.glb");
