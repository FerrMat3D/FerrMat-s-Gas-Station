/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import * as THREE from 'three';
import { ShaderMaterial } from 'three';




export function Cercadin(props) {
  const { nodes, materials } = useGLTF("./Cercadin.glb");

  const material = new ShaderMaterial({
    side: THREE.DoubleSide,  // Adicione esta linha para renderizar de ambos os lados
    uniforms: {
      colorStart: { value: new THREE.Vector3(180, 180, 80) },
      colorEnd: { value: new THREE.Vector3(0, 0, 0) },
      time: { value: 0.0 },
    },
    vertexShader: `
      void main() {
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
      }
    `,
    fragmentShader: `
      uniform float time;
      uniform vec3 colorStart;
      uniform vec3 colorEnd;
  
      void main() {
        // Use a função sin para criar uma transição suave com fade in e fade out
        float transition = clamp(sin(time * 3.14159265359), 0.0, 1.0);
  
        // Interpole entre as cores de início e fim com base na transição
        vec3 color = mix(colorStart, colorEnd, transition);
  
        gl_FragColor = vec4(color, 1.0);
      }
    `,
  });
  
  
  const currentTimeRef = useRef(0);
  
  useEffect(() => {
    let animationFrameId;
  
    const updateMaterialTime = () => {
      const time = (performance.now() % 1000) / 1500;
      currentTimeRef.current = time;
      material.uniforms.time.value = time;
      animationFrameId = requestAnimationFrame(updateMaterialTime);
    };
  
    updateMaterialTime();
  
    return () => {
      cancelAnimationFrame(animationFrameId);
    };
  },  [material]); // Executa apenas uma vez ao montar o componente


  return (
    <group {...props} dispose={null}>
      <group
        position={[0, 0, 0]}
        rotation={[Math.PI / 2, -Math.PI / 2, 0]}
        scale={[0.22922958, 1, 1]}
      >
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Plane007.geometry}
          material={materials.SNOW}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Plane007_1.geometry}
          material={materials.WOOD}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Plane007_2.geometry}
          material={materials.Cabo}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Plane007_3.geometry}
          material={material}
        />
      </group>
    </group>
  );
}

useGLTF.preload("./Cercadin.glb");
