/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { TextureLoader } from 'three';
import { useLoader,useFrame, useThree } from '@react-three/fiber';



export function Tvs({ onMeshClick, ...props })  {
  const { nodes, materials } = useGLTF("./Tvs.glb");


  const menu_background = useLoader(TextureLoader, './Textures/background.png');
  const menu_desactivated = useLoader(TextureLoader, './Textures/menu_desactivated.png');
  const menu_projects = useLoader(TextureLoader, './Textures/menu_project.png');
  const menu_about = useLoader(TextureLoader, './Textures/menu_about.png');
  const menu_credits = useLoader(TextureLoader, './Textures/menu_credits.png');
  const screen_credits = useLoader(TextureLoader, './Textures/screen_credits.png');

  const [hovered, setHovered] = useState(false);

  const [vercreditos, setvercreditos] = useState(false);

  const tela2Ref = useRef();

  const [acaoRealizada, setAcaoRealizada] = useState(false);



  const handlecredits = () => {

    console.log("Clicou em Creditos")
    setvercreditos(true);
    materials.tela2.map = screen_credits;
   
    
  };



  return (

    
    
    <group {...props} dispose={null}>




      <mesh
        castShadow
        receiveShadow
        geometry={nodes.TV_MENU.geometry}
        material={materials.tv}
        position={[26.23144341, 1.87185979, -18.31431961]}
        rotation={[-1e-7, -0.61086526, Math.PI / 2]}
        scale={[1, 0.34887829, 1]}
      />


      
      <mesh
       onClick={() => {

  
      if(vercreditos){
        materials.tela2.map = menu_desactivated;
setvercreditos(false);
      }}
    
    }
        geometry={nodes.tela1.geometry}
        material={materials["Material.029"]}
        position={[26.3475132, 7.13874769, -18.23490143]}
        rotation={[-1e-7, -0.61086526, Math.PI / 2]}
        scale={[1, 0.34887829, 1]}>

   <meshStandardMaterial color={[0.2, 0.2, 0.2]} toneMapped={false}  map={menu_background}/>

</mesh>

      <mesh
      
        geometry={nodes.tela2.geometry}
        
        material={materials.tela2}
        position={[26.35403442, 7.13874769, -18.23033524]}
        rotation={[-1e-7, -0.61086526, Math.PI / 2]}
        scale={[1, 0.34887829, 1]}
        onAfterRender={(event) =>{

if(!acaoRealizada){
  
  
  materials.tela2.map = menu_desactivated

  setAcaoRealizada(true);

}



        }



        }
  >


  </mesh>


  
      <mesh
 
        geometry={nodes.hitbox_projetcs.geometry}
        material={materials["Material.030"]}
        position={[26.36752319, 8.81359482, -18.21212959]}
        rotation={[0, -0.61086525, 0]}
        scale={[0.10000002, 1, 1]}
        ref={tela2Ref}

        onPointerOver={(event) => {
          if (!hovered && !vercreditos) {
            setHovered(true);
            // Troca a textura para menu_projects quando o mouse passa sobre a geometria
            
            materials.tela2.map = menu_projects;
            materials.tela2.needsUpdate = true;
          }
        }}
        onPointerOut={(event) => {
          if (hovered && !vercreditos) {
            setHovered(false);
            // Troca a textura de volta para menu_desactivated quando o mouse sai da geometria
            materials.tela2.map = menu_desactivated;
            materials.tela2.emissiveIntensity = 0;
            materials.tela2.needsUpdate = true;
          }
        }}
      >



      </mesh>


      <mesh

onClick={() => !vercreditos && onMeshClick()}

        geometry={nodes.hitbox_about.geometry}
        material={materials["Material.030"]}
        position={[26.36752319, 6.27315903, -18.21212959]}
        rotation={[0, -0.61086525, 0]}
        scale={[0.10000002, 1, 1]}
        onPointerOver={(event) => {
          if (!hovered && !vercreditos) {
            setHovered(true);
            // Troca a textura para menu_about quando o mouse passa sobre a geometria
            
            materials.tela2.map = menu_about;
            materials.tela2.needsUpdate = true;
          }
        }}
        onPointerOut={(event) => {
          if (hovered && !vercreditos) {
            setHovered(false);
            // Troca a textura de volta para menu_desactivated quando o mouse sai da geometria
            materials.tela2.map = menu_desactivated;
            materials.tela2.emissiveIntensity = 0;
            materials.tela2.needsUpdate = true;
          }
        }}
      />
      <mesh
   onClick={handlecredits}
        geometry={nodes.hitbox_credits.geometry}
        material={materials["Material.030"]}
        position={[26.36752319, 3.76075864, -18.21212959]}
        rotation={[0, -0.61086525, 0]}
        scale={[0.10000002, 1, 1]}
        onPointerOver={(event) => {
          if (!hovered && !vercreditos) {
            setHovered(true);
            // Troca a textura para menu_projects quando o mouse passa sobre a geometria
            
            materials.tela2.map =menu_credits;
            materials.tela2.needsUpdate = true;
          }
        }}
        onPointerOut={(event) => {
          if (hovered && !vercreditos) {
            setHovered(false);
            // Troca a textura de volta para menu_desactivated quando o mouse sai da geometria
            materials.tela2.map = menu_desactivated;
            materials.tela2.emissiveIntensity = 0;
            materials.tela2.needsUpdate = true;
          }
        }}
      />
    </group>
  );
}



useGLTF.preload("./Tvs.glb");
